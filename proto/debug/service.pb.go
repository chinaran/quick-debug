// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/debug/service.proto

package debug

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UploadFileRequest struct {
	// file chunk
	FileChunk []byte `protobuf:"bytes,1,opt,name=fileChunk,proto3" json:"fileChunk,omitempty"`
}

func (m *UploadFileRequest) Reset()         { *m = UploadFileRequest{} }
func (m *UploadFileRequest) String() string { return proto.CompactTextString(m) }
func (*UploadFileRequest) ProtoMessage()    {}
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4fc6de54d6b635, []int{0}
}
func (m *UploadFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileRequest.Merge(m, src)
}
func (m *UploadFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *UploadFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileRequest proto.InternalMessageInfo

func (m *UploadFileRequest) GetFileChunk() []byte {
	if m != nil {
		return m.FileChunk
	}
	return nil
}

type UploadFileResponse struct {
	// reponse code
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// response message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *UploadFileResponse) Reset()         { *m = UploadFileResponse{} }
func (m *UploadFileResponse) String() string { return proto.CompactTextString(m) }
func (*UploadFileResponse) ProtoMessage()    {}
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4fc6de54d6b635, []int{1}
}
func (m *UploadFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileResponse.Merge(m, src)
}
func (m *UploadFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *UploadFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileResponse proto.InternalMessageInfo

func (m *UploadFileResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UploadFileResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TailLogRequest struct {
	// tail -f
	Follow bool `protobuf:"varint,1,opt,name=follow,proto3" json:"follow,omitempty"`
	// tail from the last Nth location (byte, not line)
	// 0: from file header
	N int64 `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
}

func (m *TailLogRequest) Reset()         { *m = TailLogRequest{} }
func (m *TailLogRequest) String() string { return proto.CompactTextString(m) }
func (*TailLogRequest) ProtoMessage()    {}
func (*TailLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4fc6de54d6b635, []int{2}
}
func (m *TailLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TailLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TailLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TailLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TailLogRequest.Merge(m, src)
}
func (m *TailLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *TailLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TailLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TailLogRequest proto.InternalMessageInfo

func (m *TailLogRequest) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *TailLogRequest) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type TailLogResponse struct {
	// log content
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *TailLogResponse) Reset()         { *m = TailLogResponse{} }
func (m *TailLogResponse) String() string { return proto.CompactTextString(m) }
func (*TailLogResponse) ProtoMessage()    {}
func (*TailLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4fc6de54d6b635, []int{3}
}
func (m *TailLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TailLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TailLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TailLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TailLogResponse.Merge(m, src)
}
func (m *TailLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *TailLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TailLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TailLogResponse proto.InternalMessageInfo

func (m *TailLogResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadFileRequest)(nil), "debug.UploadFileRequest")
	proto.RegisterType((*UploadFileResponse)(nil), "debug.UploadFileResponse")
	proto.RegisterType((*TailLogRequest)(nil), "debug.TailLogRequest")
	proto.RegisterType((*TailLogResponse)(nil), "debug.TailLogResponse")
}

func init() { proto.RegisterFile("proto/debug/service.proto", fileDescriptor_0e4fc6de54d6b635) }

var fileDescriptor_0e4fc6de54d6b635 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0xa0, 0x0d, 0x39, 0x55, 0x20, 0x2c, 0x51, 0xa5, 0x15, 0x32, 0x55, 0xa6, 0x48,
	0x48, 0x29, 0x1f, 0x12, 0x13, 0x53, 0xf9, 0x98, 0x58, 0xb0, 0x60, 0x61, 0x4b, 0x93, 0x6b, 0x88,
	0x6a, 0xec, 0x50, 0x27, 0xf0, 0x37, 0xe0, 0x5f, 0x31, 0x76, 0x64, 0x44, 0xc9, 0x1f, 0x41, 0xb8,
	0x09, 0xe5, 0x6b, 0xf3, 0xbd, 0xbe, 0xc7, 0xef, 0xbd, 0x3e, 0xe8, 0x65, 0x33, 0x95, 0xab, 0x61,
	0x8c, 0xe3, 0x22, 0x19, 0x6a, 0x9c, 0x3d, 0xa6, 0x11, 0x06, 0x46, 0xa3, 0x2d, 0x23, 0x7a, 0x07,
	0xb0, 0x75, 0x93, 0x09, 0x15, 0xc6, 0x17, 0xa9, 0x40, 0x8e, 0x0f, 0x05, 0xea, 0x9c, 0xee, 0x80,
	0x33, 0x49, 0x05, 0x9e, 0xde, 0x15, 0x72, 0xea, 0x92, 0x01, 0xf1, 0x3b, 0x7c, 0x29, 0x78, 0x23,
	0xa0, 0xdf, 0x11, 0x9d, 0x29, 0xa9, 0x91, 0x52, 0x58, 0x8b, 0x54, 0x8c, 0xa6, 0xbd, 0xc5, 0xcd,
	0x99, 0xba, 0x60, 0xdf, 0xa3, 0xd6, 0x61, 0x82, 0xee, 0xca, 0x80, 0xf8, 0x0e, 0x6f, 0x4a, 0xef,
	0x18, 0x36, 0xae, 0xc3, 0x54, 0x5c, 0xaa, 0xa4, 0xf1, 0xec, 0x42, 0x7b, 0xa2, 0x84, 0x50, 0x4f,
	0xe6, 0x85, 0x75, 0x5e, 0x57, 0xb4, 0x03, 0x44, 0x1a, 0x7a, 0x95, 0x13, 0xe9, 0xed, 0xc1, 0xe6,
	0x17, 0x57, 0x1b, 0xbb, 0x60, 0x47, 0x4a, 0xe6, 0x28, 0x73, 0x43, 0x3a, 0xbc, 0x29, 0x0f, 0x5f,
	0x08, 0xc0, 0x55, 0x91, 0x46, 0xd3, 0xb3, 0xcf, 0xa8, 0xf4, 0x1c, 0x60, 0x39, 0x37, 0x75, 0x03,
	0xf3, 0x01, 0xc1, 0x9f, 0xf4, 0xfd, 0xde, 0x3f, 0x37, 0x0b, 0x2f, 0xcf, 0xf2, 0x09, 0x3d, 0x01,
	0xbb, 0x1e, 0x81, 0x6e, 0xd7, 0x9d, 0x3f, 0xa3, 0xf4, 0xbb, 0xbf, 0xe5, 0x86, 0xde, 0x27, 0xa3,
	0xdd, 0xd7, 0x92, 0x91, 0x79, 0xc9, 0xc8, 0x7b, 0xc9, 0xc8, 0x73, 0xc5, 0xac, 0x79, 0xc5, 0xac,
	0xb7, 0x8a, 0x59, 0xb7, 0x8b, 0x85, 0x8c, 0xdb, 0x66, 0x3d, 0x47, 0x1f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x02, 0x6c, 0x34, 0x6d, 0xbb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QuickDebugClient is the client API for QuickDebug service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuickDebugClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (QuickDebug_UploadFileClient, error)
	TailLog(ctx context.Context, in *TailLogRequest, opts ...grpc.CallOption) (QuickDebug_TailLogClient, error)
}

type quickDebugClient struct {
	cc *grpc.ClientConn
}

func NewQuickDebugClient(cc *grpc.ClientConn) QuickDebugClient {
	return &quickDebugClient{cc}
}

func (c *quickDebugClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (QuickDebug_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QuickDebug_serviceDesc.Streams[0], "/debug.QuickDebug/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &quickDebugUploadFileClient{stream}
	return x, nil
}

type QuickDebug_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type quickDebugUploadFileClient struct {
	grpc.ClientStream
}

func (x *quickDebugUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *quickDebugUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quickDebugClient) TailLog(ctx context.Context, in *TailLogRequest, opts ...grpc.CallOption) (QuickDebug_TailLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QuickDebug_serviceDesc.Streams[1], "/debug.QuickDebug/TailLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &quickDebugTailLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QuickDebug_TailLogClient interface {
	Recv() (*TailLogResponse, error)
	grpc.ClientStream
}

type quickDebugTailLogClient struct {
	grpc.ClientStream
}

func (x *quickDebugTailLogClient) Recv() (*TailLogResponse, error) {
	m := new(TailLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuickDebugServer is the server API for QuickDebug service.
type QuickDebugServer interface {
	UploadFile(QuickDebug_UploadFileServer) error
	TailLog(*TailLogRequest, QuickDebug_TailLogServer) error
}

// UnimplementedQuickDebugServer can be embedded to have forward compatible implementations.
type UnimplementedQuickDebugServer struct {
}

func (*UnimplementedQuickDebugServer) UploadFile(srv QuickDebug_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedQuickDebugServer) TailLog(req *TailLogRequest, srv QuickDebug_TailLogServer) error {
	return status.Errorf(codes.Unimplemented, "method TailLog not implemented")
}

func RegisterQuickDebugServer(s *grpc.Server, srv QuickDebugServer) {
	s.RegisterService(&_QuickDebug_serviceDesc, srv)
}

func _QuickDebug_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuickDebugServer).UploadFile(&quickDebugUploadFileServer{stream})
}

type QuickDebug_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type quickDebugUploadFileServer struct {
	grpc.ServerStream
}

func (x *quickDebugUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *quickDebugUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _QuickDebug_TailLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuickDebugServer).TailLog(m, &quickDebugTailLogServer{stream})
}

type QuickDebug_TailLogServer interface {
	Send(*TailLogResponse) error
	grpc.ServerStream
}

type quickDebugTailLogServer struct {
	grpc.ServerStream
}

func (x *quickDebugTailLogServer) Send(m *TailLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _QuickDebug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debug.QuickDebug",
	HandlerType: (*QuickDebugServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _QuickDebug_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TailLog",
			Handler:       _QuickDebug_TailLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/debug/service.proto",
}

func (m *UploadFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FileChunk) > 0 {
		i -= len(m.FileChunk)
		copy(dAtA[i:], m.FileChunk)
		i = encodeVarintService(dAtA, i, uint64(len(m.FileChunk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TailLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TailLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TailLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.N != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.N))
		i--
		dAtA[i] = 0x10
	}
	if m.Follow {
		i--
		if m.Follow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TailLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TailLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TailLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintService(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UploadFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileChunk)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *UploadFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovService(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *TailLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Follow {
		n += 2
	}
	if m.N != 0 {
		n += 1 + sovService(uint64(m.N))
	}
	return n
}

func (m *TailLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UploadFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileChunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileChunk = append(m.FileChunk[:0], dAtA[iNdEx:postIndex]...)
			if m.FileChunk == nil {
				m.FileChunk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TailLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TailLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TailLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Follow = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TailLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TailLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TailLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
